<?xml version="1.0"?>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_idx_loop(q('$w+ [ $1 ] = $w+ [ $1 ] ;')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::copy instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_idx_loop(q('$w+ [ $1 ] = $w+ ;')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::fill instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_idx_loop(q('$w+ [ $1 ] = $name ( ) ;')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::generate instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_idx_loop(q('$w+ [ $1 ] = $name ( $w+ [ $1 ] ) ;')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::transform instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_idx_loop(q('$w+ [ $1 ] = $name ( $w+ [ $1 ] , $w+ [ $1 ] ) ;')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::transform instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_range_loop(q('(?:(?<idx1>$w+) ++|++ (?<idx2>$w+)) ; if (*) { $w+ = $g{idx1}|$g{idx2} ; (?:break ; )?(?:return *; )?}')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_range_loop(q('if (*) { $w+ = (?<idx>$w) ; (?:break ; )?(?:return *; )?} (?:($g{idx}) ++|++ ($g{idx})) ;')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_range_loop(q('(?:(?<idx1>$w+) ++|++ (?<idx2>$w+)) ; if (*) { return $g{idx1}|$g{idx2} ; }')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><[<% for_range_loop(q('if (*) { return (?<idx>$w) ; } (?:($g{idx}) ++|++ ($g{idx})) ;')) %>]></pattern>
    <message>
        <id>useStlAlgorithm</id>
        <severity>style</severity>
        <summary>Considering using std::find or std::find_if instead.</summary>
    </message>
</rule>
